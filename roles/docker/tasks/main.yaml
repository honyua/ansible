---

- name: Run the equivalent of "apt-get update" as a separate step
  ansible.builtin.apt:
    update_cache: yes

- name: Install curl
  ansible.builtin.apt:
    name: curl
    state: present
  tags: install

- name: Install docker and some dependencies
  ansible.builtin.raw: "curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun"
  register: my_output # <- Registers the command output.
  changed_when: my_output.rc != 0 # <- Uses the return code to define when the task has changed.
  tags: install

- name: Show docker Verson
  ansible.builtin.raw: docker -v
  register: my_output # <- Registers the command output.
  changed_when: my_output.rc != 0 # <- Uses the return code to define when the task has changed.
  tags: install

# - name: Install python3-pip
#   ansible.builtin.apt:
#     name: python3-pip
#     state: present
#   tags: install

# - name: Pip install docker
#   ansible.builtin.pip:
#     name: docker
#   tags: install


# - name: Create Mysql container
#   community.docker.docker_container:
#     name: mysql
#     image: mysql
#     state: started
#     recreate: true
#   tags: mysql

# - name: Create nginx container
#   community.docker.docker_container:
#     name: nginx4
#     image: nginx
#     state: started
#     recreate: true
#     interactive: true
#     published_ports:
#       - "8872:80"
#   tags: nginx

# - name: Install docker and some dependencies
#   ansible.builtin.raw: "docker logs nginx4 "
#   tags: logs
#   changed_when: my_output.rc != 0 # <- Uses the return code to define when the task has changed.

- name: Run the equivalent of "apt-get clean" as a separate step
  ansible.builtin.apt:
    clean: true

# - name: Set authorized key taken from file
#   ansible.posix.authorized_key:
#     user: root
#     state: present
#     key: "{{ lookup('file', '/workspaces/ansible/files/.ssh/authorized_keys') }}"
